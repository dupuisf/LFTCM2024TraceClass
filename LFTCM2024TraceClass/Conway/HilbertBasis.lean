import Mathlib.Analysis.InnerProductSpace.Adjoint
import Mathlib.Analysis.InnerProductSpace.l2Space
import Mathlib.Topology.Algebra.InfiniteSum.Module

/-!
# Content about Hilbert bases

Could maybe be merged in `Mathlib/Analysis/InnerProductSpace/l2Space`
 -/

noncomputable section

variable (E : Type*) [NormedAddCommGroup E] [CompleteSpace E]
  [InnerProductSpace ‚ÑÇ E]

/- Standard Hilbert basis -/

def stdHilbertIndex := Classical.choose (exists_hilbertBasis ‚ÑÇ E)

lemma stdHilbertIndex_spec : ‚àÉ (b : HilbertBasis (stdHilbertIndex E) ‚ÑÇ E), b = ((‚Üë) : (stdHilbertIndex E) ‚Üí E) :=
  Classical.choose_spec <| exists_hilbertBasis ‚ÑÇ E

def stdHilbertBasis : HilbertBasis (stdHilbertIndex E) ‚ÑÇ E :=
  Classical.choose <| stdHilbertIndex_spec E

end

section

variable {E : Type*} [NormedAddCommGroup E] [CompleteSpace E]
  [InnerProductSpace ‚ÑÇ E]

local notation "‚ü™" x ", " y "‚ü´" => @inner ‚ÑÇ _ _ x y

/-- Parseval identity ; should probably exist (or else be added to) the HilbertBasis file -/
lemma parseval {Œπ : Type*} (B : HilbertBasis Œπ ‚ÑÇ E) (x : E) : ‚àë' (i : Œπ), ‚Äñ‚ü™x, B i‚ü´‚Äñ^2 = ‚Äñx‚Äñ^2 := by
  rw [norm_sq_eq_inner (ùïú := ‚ÑÇ)]
  rw [‚Üê HilbertBasis.tsum_inner_mul_inner B]
  rw [IsROrC.re_tsum]
  conv =>
    enter [2, 1, a]
    rw [‚Üê inner_conj_symm]
    rw [‚Üê IsROrC.innerProductSpace.proof_1]
    rw [‚Üê inner_conj_symm, IsROrC.norm_conj]
  apply HilbertBasis.summable_inner_mul_inner B

lemma enn_parseval {Œπ : Type*} (B : HilbertBasis Œπ ‚ÑÇ E) (x : E) :
  ‚àë' (i : Œπ), (‚Äñ‚ü™x, B i‚ü´‚Äñ‚Çä^2 : ENNReal) = (‚Äñx‚Äñ‚Çä^2 : ENNReal) := by
  -- TODO: Deduce this ENNReal version of the previous one
  sorry

end
